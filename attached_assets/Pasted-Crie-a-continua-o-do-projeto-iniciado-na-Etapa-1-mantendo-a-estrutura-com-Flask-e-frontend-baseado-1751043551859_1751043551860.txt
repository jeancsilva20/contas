Crie a continuação do projeto iniciado na Etapa 1, mantendo a estrutura com Flask e frontend baseado em Material Design 5 via Web Components. Nesta Etapa 2, implemente a funcionalidade de importação de arquivos .xlsx e .csv protegidos por senha, processando e armazenando os dados de forma estruturada em arquivos JSON no servidor.

O sistema deve permitir que o usuário envie arquivos de fatura de cartão ou extrato bancário, junto com a senha do arquivo. O backend deverá ser capaz de desbloquear o arquivo com a senha fornecida, ler seu conteúdo, extrair as transações relevantes e salvar os dados estruturados no diretório local data/.

Use a biblioteca msoffcrypto-tool para desbloquear arquivos Excel com senha e a biblioteca pandas para ler os dados em DataFrames. Os arquivos CSV devem ser lidos diretamente com pandas, sem necessidade de senha.

As transações devem ser processadas e padronizadas em um formato unificado com os seguintes campos obrigatórios: id, tipo (cartao ou conta), data, descricao, valor, tipo_movimento (entrada ou saida), fonte (ex: C6 Carbon ou C6 Conta Corrente), hash único da transação e um campo opcional chamado observacoes.

O campo hash deverá ser calculado com base em uma combinação dos campos data, descricao, valor e tipo, para que o sistema possa detectar transações duplicadas e evitar importações repetidas. Use hashlib (SHA256) para gerar esse hash.

Implemente a lógica para verificar se uma transação já existe em data/transacoes.json com o mesmo hash. Se sim, ignore. Se não, adicione a transação ao arquivo.

Além disso, se a transação for uma saída (tipo_movimento igual a 'saida'), ela deve ser incluída também no arquivo data/pendentes.json, a menos que já tenha sido revisada anteriormente (presente em data/revisoes.json). Se a transação já tiver revisão registrada, não deve ser incluída na fila de pendentes novamente.

Garanta que, ao importar um arquivo, o sistema:

desbloqueie o arquivo se necessário

leia os dados de forma robusta, tratando variações de coluna

determine se é fatura de cartão ou extrato bancário

padronize os dados em objetos de transação no formato unificado

gere um hash único por transação

ignore duplicatas já existentes em transacoes.json

salve as novas transações no final do arquivo transacoes.json

envie as transações de saída não revisadas para pendentes.json

Mantenha os arquivos JSON bem formatados, com indentação. Não use banco de dados neste projeto.

Atualize a rota /upload para aceitar o envio do arquivo e da senha. Após o processamento, mostre uma notificação via Notiflix informando a quantidade de novas transações importadas e quantas foram enviadas para revisão.

Garanta que erros como senha incorreta, formato inválido ou problemas na leitura sejam tratados com uma notificação clara usando Notiflix.

Crie ou atualize os seguintes arquivos:

app.py: com rota POST funcional para processamento do upload

services/importador.py: com funções de leitura, identificação e conversão das transações

utils/hash.py: com função de geração de hash único

data/transacoes.json: criado e atualizado automaticamente

data/pendentes.json: criado e atualizado automaticamente

data/revisoes.json: usado para checar revisões existentes (pode estar vazio por enquanto)

Mantenha a estrutura do projeto leve, sem frameworks pesados, e com foco em organização e legibilidade do código. A interface HTML deve continuar simples, utilizando Material Web para os inputs e botões, e o layout da página de upload deve se manter funcional.